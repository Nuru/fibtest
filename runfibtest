#!/bin/bash 
#
# Copyright (C) 2019 Indeed Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: "Dave Chiluk"
# set -euo pipefail

CGROUP=user.slice/fibtest
CGROUPDIR=/sys/fs/cgroup/cpu,cpuacct
typeset -i NRCPUS THREADS QUOTA TEST_SECONDS
typeset -i THREADEDIT THREADEDTIME THREADEDTHROT SINGLEIT SINGLETIME SINGLETHROT
typeset -i BNRPERIODS ANRPERIODS DNRPERIODS BNRTHROTT ANRTHROTT DNRTHROTT AUSAGE BUSAGE DUSAGE
NRCPUS=$(getconf _NPROCESSORS_ONLN)
THREADS=${1:-NRCPUS}
QUOTA=$(( 10000 ))

checkandcompile () {
	if [ ! -x fibtest ] ; then
		make clean
		make
		if [ ! -x fibtest ] ; then
			echo "Unable to compile fibtest\n"
			exit 1 
		fi
	fi
}

# Save old governors, and assume all governors match
savegovernors () {
	OLDGOV=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null)
	OLDENERGY=$(cat /sys/devices/system/cpu/cpu0/cpufreq/energy_performance_preference 2>/dev/null)
}

# Set governors
setgovernors () {
	SCALINGGOV=$1
	ENERGYGOV=$2

	if [[ -n $SCALINGGOV ]] && [[ -z $OLDGOV ]]; then
		echo No existing scaling_governor found, not attempting to set it to "${SCALINGGOV}" >&2
	fi
	if [[ -n $ENERGYGOV ]] && [[ -z $OLDENERGY ]]; then
		echo No existing energy_performance_preference found, not attempting to set it to "${ENERGYGOV}" >&2
	fi

	for (( i=0 ; i < NRCPUS ; i++ ))
	do
		[[ -n $SCALINGGOV ]] && [[ -n $OLDGOV ]] && sudo sh -c "echo '$SCALINGGOV' > /sys/devices/system/cpu/cpu${i}/cpufreq/scaling_governor"
		[[ -n $ENERGYGOV ]] && [[ -n $OLDENERGY ]] && sudo sh -c "echo '$ENERGYGOV' > /sys/devices/system/cpu/cpu${i}/cpufreq/energy_performance_preference"
	done
}

runtest () {
	BNRPERIODS=$(grep nr_periods ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	BNRTHROTT=$(grep nr_throttled ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	BTHROTT=$(grep throttled_time ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	BUSAGE=$(cat ${CGROUPDIR}/${CGROUP}/cpuacct.usage)

	#####  RUN TEST #####
	TEST_SECONDS=5
	ITERATIONS=$(./fibtest -f 0 -t "${THREADS}" -s ${TEST_SECONDS} | awk -F': ' '{print $2}' )
	echo "Iterations Completed(K): $ITERATIONS (expected: $(( TEST_SECONDS * 10 * THREADS )) +/- ${THREADS})"
	ANRPERIODS=$(grep nr_periods ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	ANRTHROTT=$(grep nr_throttled ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	ATHROTT=$(grep throttled_time ${CGROUPDIR}/${CGROUP}/cpu.stat | awk '{print $2}')
	AUSAGE=$(cat ${CGROUPDIR}/${CGROUP}/cpuacct.usage)
	DNRPERIODS=$(( ANRPERIODS - BNRPERIODS ))
	DNRTHROTT=$(( ANRTHROTT - BNRTHROTT ))
	DTHROTT=$(( ATHROTT - BTHROTT ))
	DUSAGE=$(( AUSAGE - BUSAGE ))
	echo "CPU Usage (msecs) = $(( DUSAGE / 1000000 )) (test invalid unless this is much less than $(( TEST_SECONDS * 100 )))"
	echo "Throttled time (msecs) = $(( DTHROTT / 1000000 )) (should be zero)"
	echo "Throttled for $DNRTHROTT periods (should be zero)"
	# echo "Reported elapsed CFS periods = ${DNRPERIODS}"
	if (( DNRTHROTT > 1 )) || (( DTHROTT > 5000000 )); then
		echo "EXCESSIVE THROTTLING DETECTED" >&2
		return 1
	else
		echo 'CFS "low cpu usage with high throttling" bug NOT detected'
	fi
}


checkandcompile
savegovernors
setgovernors performance performance

# Create CGROUP
if [ ! -d ${CGROUPDIR}/${CGROUP} ] ; then
	sudo mkdir -p ${CGROUPDIR}/${CGROUP} || exit $?
fi

if (( $(cat ${CGROUPDIR}/${CGROUP}/cpu.cfs_period_us ) != $(( $QUOTA * 10 )) )); then
	echo cpu.cfs_period_us is "$(cat ${CGROUPDIR}/${CGROUP}/cpu.cfs_period_us)" instead of expected "$(( $QUOTA * 10 ))" >&2
	QUOTA=$(( $(cat ${CGROUPDIR}/${CGROUP}/cpu.cfs_period_us ) / 10 ))
	echo adjusting quota to ${QUOTA} us
fi

# Set the CPU quota
sudo sh -c "echo $(( QUOTA * THREADS )) > ${CGROUPDIR}/${CGROUP}/cpu.cfs_quota_us"
sudo sh -c "echo $$ >> ${CGROUPDIR}/${CGROUP}/tasks"

# ****************** RUN THE TEST ***************
# Uses Number of CPUs 
runtest 
exit_status=$?
#
THREADEDIT=${ITERATIONS}


# ***********************************************

setgovernors "${OLDGOV}" "${OLDENERGY}"

exit $exit_status
